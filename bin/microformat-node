#!/usr/bin/env node

var app         = require('http').createServer(handler),
    fs          = require('fs'),
    parser      = require('../lib/parser.js')
    testWriter  = require('../test/testWriter.js');

//parser.setParserOptions({logLevel: 4})    


function handler(req, res) {

  // get the query object
  var query = require('url').parse(req.url, true).query;


  // if the root is requested then demo form.
  if (req.url === '/') {
    writeHTML('/../static/index.html');

  }else if (req.url.indexOf('/test/update/') > -1 && !query.url) {
    testWriter.updateTests();
    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
    res.end('<h1>Updating tests how...</h1>');

  }else if (req.url.indexOf('/test/') > -1 && !query.url) {
    var parts = req.url.split('/test/');
    writeHTML('/../static/' + parts[1]);

  }else if (req.url.indexOf('/javascript/') > -1 && !query.url) {
    writeJS(req.url);

  }else if (req.url.indexOf('/css/') > -1 && !query.url) {
    writeCSS(req.url);

  }else if (req.url.indexOf('/iamges/') > -1 && !query.url) {
    writeImages(req.url);


  // return json uf  
  }else{

    var options = {};
    if(query.formats){
      options.formats = query.formats;
    }

    if(query.useincludes){
      options.useIncludes = query.useincludes;
    }
    
    if(query.url){
      parser.parseUrl(query.url, options, function(err, ufData){
        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
        if (query.callback) {
          res.end(query.callback + '(' + JSON.stringify(ufData) + ')');
        } else {
          res.end(JSON.stringify(ufData));
        }
      });
    }

    if(query.html){
      parser.parseHtml(query.html, options, query.baseurl, function(err, ufData){
        res.writeHead(200, {'Content-Type': 'application/json; charset=utf-8'});
        if (query.callback) {
          res.end(query.callback + '(' + JSON.stringify(ufData) + ')');
        } else {
          res.end(JSON.stringify(ufData));
        }
      });
    }

  }


  function writeHTML(path){
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeStaticHTML(path){
    path = '/../static/' + path;
    res.writeHead(200, {'Content-Type': 'text/html'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeJS(path){
    var parts = path.split('/javascript/');
    path = '/../static/javascript/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/javascript'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };

  function writeCSS(path){
    var parts = path.split('/css/');
    path = '/../static/css/' + parts[1];
    res.writeHead(200, {'Content-Type': 'text/css'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };


  function writeImages(path){
    var parts = path.split('/images/');
    path = '/../static/images/' + parts[1];
    res.writeHead(200, {'Content-Type': 'image/gif'});
    fs.readFile(__dirname + path, function (err, page) {
      if(err) {
        console.log(err)
      }else{
        res.end(page);
      }
    });
    return;
  };



}

app.listen(8888, 'localhost');
console.log('App @ http://localhost:8888');